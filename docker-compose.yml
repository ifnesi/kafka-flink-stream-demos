---
version: '2'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.2.2
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9094,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:9081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:9094
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.2
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "9081:9081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:9094'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:9081

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.2.2
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:9094'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:9081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      PORT: 9021

  minio:
    image: minio/minio:RELEASE.2022-10-29T06-21-33Z
    hostname: minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    entrypoint: sh
    command: -c 'mkdir -p /data/my-bucket && minio server /data --console-address ":9001"'

  # Flink job manager - the job manager handles scheduling and assigns
  # work to task managers
  flink:
    image: flink-sandbox
    hostname: flink
    container_name: flink
    depends_on:
      - broker
      - minio
    ports:
      # This is the port at which the web UI is accessible over HTTP
      - "8081:8081"
      # Job manager port - task managers connect to the job manager via this port
      - "6123:6123"
    environment:
      JOB_MANAGER_RPC_ADDRESS: flink
      KAFKA_BOOTSTRAP_SERVER: broker:9094
      FLINK_PROPERTIES: |
        s3.access-key: minio
        s3.secret-key: minio123
        s3.endpoint: http://minio:9000
        s3.path-style-access: true
        s3.disable-ssl: true
    volumes:
      # Make bootstrap.sql available within the container's home directory
      - ${PWD}/bootstrap.sql:/opt/flink/bootstrap.sql
    command: jobmanager

  # Flink task manager - receives and executes tasks from job manager
  taskmanager:
    image: flink-sandbox
    # Note that this service does not have a container_name, as this property
    # is set dynamically based on the number of task managers that are run.
    depends_on:
      - flink
    environment:
      JOB_MANAGER_RPC_ADDRESS: flink
      FLINK_PROPERTIES: |
        s3.access-key: minio
        s3.secret-key: minio123
        s3.endpoint: http://minio:9000
        s3.path-style-access: true
        s3.disable-ssl: true
    command: taskmanager

  datagen:
    # Generate random data (AVRO schema), e.g.:
    # {
    #   "user_id": "222322",
    #   "item_id": "3193352",
    #   "category_id": "2572604",
    #   "behavior": "click",
    #   "ts": "2017-11-27 00:07:35"
    # }
    image: pydatagen
    hostname: datagen
    container_name: datagen
    command: >
      sh -c "while [[ \"$(curl -s -o /dev/null -w ''%{http_code}'' http://schema-registry:9081)\" != \"200\" ]]; do sleep 2; done && python3 pydatagen/pydatagen.py --schema-filename users_behavior.avro --keyfield user_id --topic user_behavior  --bootstrap-servers broker:9094  --schema-registry http://schema-registry:9081  --interval 100"
    depends_on:
      - control-center
      - flink
      - taskmanager
